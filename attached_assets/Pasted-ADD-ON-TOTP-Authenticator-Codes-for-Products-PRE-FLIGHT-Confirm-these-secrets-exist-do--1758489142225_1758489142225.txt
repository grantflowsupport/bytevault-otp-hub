ADD-ON: “TOTP (Authenticator) Codes for Products”

PRE-FLIGHT:
- Confirm these secrets exist (do not continue until set):
  - CRYPTO_SECRET_KEY  # already present from main app
  - TOTP_DEFAULT_DIGITS=6
  - TOTP_DEFAULT_PERIOD=30
  - TOTP_DEFAULT_ALGO=SHA1

SCHEMA:
- Create table public.product_totp (
    id uuid pk default gen_random_uuid(),
    product_id uuid not null references public.products(id) on delete cascade,
    secret_enc text not null,         -- AES-GCM encrypted Base32 secret
    issuer text,
    account_label text,
    digits int not null default 6,
    period int not null default 30,
    algorithm text not null default 'SHA1',
    is_active boolean not null default true,
    created_at timestamptz not null default now()
  );
- Enable RLS; admins full control; users have no select on this table.

BACKEND:
- Admin endpoint:
  POST /api/admin/totp  (admin only)
  Body: { id?, product_id, secret_base32, issuer?, account_label?, digits?, period?, algorithm?, is_active? }
  - Encrypt secret_base32 → secret_enc
  - Insert/update row
- User endpoint:
  POST /api/get-totp/:slug  (auth required, rate-limited same as OTP)
  Steps:
    1) Validate user has active access to product (by slug).
    2) Load active product_totp for that product.
    3) Decrypt secret_enc, compute current TOTP using given digits/period/algorithm.
    4) Return { code, valid_for_seconds } where valid_for_seconds = period - (now % period).

IMPLEMENTATION NOTES:
- Use a TOTP library (e.g., otplib or speakeasy) on the server.
- Never return or log the decrypted secret.
- Log each fetch to otp_logs with status = 'totp_success' or error variants.

FRONTEND:
- On product card (Dashboard), add a “Get 2FA Code” button if product has active TOTP configured.
- On click → call /api/get-totp/:slug → show 6-digit code in monospace with a small countdown “valid for Xs”.
- Keep existing “Get OTP” button and behavior.

SECURITY:
- Only admins can create/update TOTP entries.
- No client-side storage of secrets.
- Rate-limit requests (reuse same limiter as email OTP).
- Full audit trail in otp_logs.

TESTS:
- Create TOTP for a test product; verify code matches Google Authenticator for the same secret.
- Check countdown and rollover at 30s boundary.
- Ensure users without access get 403; expired access blocks as expected.
